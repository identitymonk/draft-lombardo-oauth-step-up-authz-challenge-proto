{
  "magic": "E!vIA5L86J2I",
  "timestamp": "2025-07-20T01:54:49.202910+00:00",
  "repo": "identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto",
  "labels": [
    {
      "name": "bug",
      "description": "Something isn't working",
      "color": "d73a4a"
    },
    {
      "name": "documentation",
      "description": "Improvements or additions to documentation",
      "color": "0075ca"
    },
    {
      "name": "duplicate",
      "description": "This issue or pull request already exists",
      "color": "cfd3d7"
    },
    {
      "name": "enhancement",
      "description": "New feature or request",
      "color": "a2eeef"
    },
    {
      "name": "good first issue",
      "description": "Good for newcomers",
      "color": "7057ff"
    },
    {
      "name": "help wanted",
      "description": "Extra attention is needed",
      "color": "008672"
    },
    {
      "name": "invalid",
      "description": "This doesn't seem right",
      "color": "e4e669"
    },
    {
      "name": "question",
      "description": "Further information is requested",
      "color": "d876e3"
    },
    {
      "name": "wontfix",
      "description": "This will not be worked on",
      "color": "ffffff"
    }
  ],
  "issues": [
    {
      "number": 2,
      "id": "I_kwDOOIDCrM64Q37e",
      "title": "Security considerations",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/2",
      "state": "CLOSED",
      "author": "gffletch",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "I'd recommend pulling out each point of the security considerations into it's own sub-section. This will make it clearer to the reader.\n\nAlso, the point that the enterprise is \"leaking\" authorization policy into the response to the client is something that I think should be more clearly stated. Or maybe call out that if this is a concern plan to use the \"PAR\" extension. ",
      "createdAt": "2025-05-26T14:44:08Z",
      "updatedAt": "2025-07-02T19:30:12Z",
      "closedAt": "2025-07-02T19:30:12Z",
      "comments": [
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "Right on @gffletch , I thought about the same thing about PAR.\n\nBut a PAR starting at the RP would even better. Might worth discussing as a separate proposal maybe?",
          "createdAt": "2025-05-28T02:00:26Z",
          "updatedAt": "2025-05-28T02:00:26Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "Solved by #4 last commit",
          "createdAt": "2025-06-23T21:12:05Z",
          "updatedAt": "2025-06-23T21:12:05Z"
        }
      ]
    },
    {
      "number": 3,
      "id": "I_kwDOOIDCrM64TIoX",
      "title": "Adding reference to RFC 9470 OAuth 2.0 Step Up Authentication Challenge Protocol",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/3",
      "state": "CLOSED",
      "author": "identitymonk",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Feedback from @aaronpk\n\n> Justify why a new spec and one the 403 and not a 401.\nHere we expect the token to have gone through conventional OAuth2 validation first before a decision is made on the content of the claims, including the authorization_details",
      "createdAt": "2025-05-26T20:39:21Z",
      "updatedAt": "2025-07-03T20:49:50Z",
      "closedAt": "2025-07-03T20:49:50Z",
      "comments": [
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "Solved by #4  last commit",
          "createdAt": "2025-06-23T21:12:23Z",
          "updatedAt": "2025-06-23T21:12:23Z"
        }
      ]
    },
    {
      "number": 5,
      "id": "I_kwDOOIDCrM64hTHH",
      "title": "Adding a FAPI 2.0 / RAR Use case",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/5",
      "state": "CLOSED",
      "author": "identitymonk",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-05-28T01:58:48Z",
      "updatedAt": "2025-07-03T20:49:44Z",
      "closedAt": "2025-07-03T20:49:44Z",
      "comments": [
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "Solved by #4 last commit",
          "createdAt": "2025-06-23T21:12:41Z",
          "updatedAt": "2025-06-23T21:12:41Z"
        }
      ]
    },
    {
      "number": 6,
      "id": "I_kwDOOIDCrM64hTNM",
      "title": "Adding a SMART on FHIR / RAR use case",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/6",
      "state": "CLOSED",
      "author": "identitymonk",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "",
      "createdAt": "2025-05-28T01:59:04Z",
      "updatedAt": "2025-07-03T20:49:36Z",
      "closedAt": "2025-07-03T20:49:36Z",
      "comments": [
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "solved by #4 last commit",
          "createdAt": "2025-06-23T21:13:01Z",
          "updatedAt": "2025-06-23T21:13:01Z"
        }
      ]
    },
    {
      "number": 7,
      "id": "I_kwDOOIDCrM64zbrW",
      "title": "Support for `method` of type `urn:ietf:params:oauth:grant-type:token-exchange`",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/7",
      "state": "CLOSED",
      "author": "identitymonk",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "As partially discussed in #2 and as part of all the discussions on Agent as actor in the process of asking a step-up of the authorization, we could add from the beginning the support of the OAuth2 Token Exchange flow.\n\nThis could ease the path for https://datatracker.ietf.org/doc/draft-oauth-ai-agents-on-behalf-of-user/",
      "createdAt": "2025-05-29T14:13:47Z",
      "updatedAt": "2025-07-17T03:25:41Z",
      "closedAt": "2025-07-17T03:25:40Z",
      "comments": [
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "We are no longer guiding the client on how to do the next authorization request with a `method` value",
          "createdAt": "2025-07-17T03:25:40Z",
          "updatedAt": "2025-07-17T03:25:40Z"
        }
      ]
    },
    {
      "number": 8,
      "id": "I_kwDOOIDCrM679-mp",
      "title": "Refinement of 401 and 403 responses",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/8",
      "state": "CLOSED",
      "author": "yaron-zehavi",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Discussion 26.06.2025:\n==============\n- Border between **Instructive** / **Informative** is hard to define. Therefore we'll:\n   - opt for a single error code\n   - Reuse WWW-Authenticate header (in line with step-up-authentication draft https://www.ietf.org/archive/id/draft-bertocci-oauth-step-up-authn-challenge-00.html#name-authentication-requirements)\n   - Provide large responses in the body with an indication in the WWW-Authenticate header, avoiding header size restrictions\n- We'll include a RFC 9728 resource_metadata_uri\n- Use ASC draft syntax describing expected token claims and values\n\nCombined Response\n=============\n\nHTTP/1.1 403 Forbidden\nWWW-Authenticate: Bearer error=\"insufficient_authorization\", error_description=\"The authorization level is not met\", resource_metadata_uri=\"https://www.example.com/.well-known/oauth-protected-resource\", body_instructions=true\n\n**Missing expected access token scope**\n```json\n{\n    \"decision\": false,\n    \"context\": {\n        \"error_msg\": \"Missing expected access token scope\",\n        \"details\": [{\n\t\t\"loc\": \"/scope\",\n\t\t\"method\": \"simple\",\n\t\t\"values\": [\"resource:read\", \"resource:write\"]\n\t\t}]\n\t}\n}\n```\n\n**Missing authorization_details**\n```json\n{\n    \"decision\": false,\n    \"context\": {\n        \"error_msg\": \"Missing authorization_details\",\n        \"details\": [{\n\t\t\t\"loc\": \"/authorization_details\",\n\t\t\t\"method\": \"simple\",\n\t\t\t\"value\": [{\n\t\t\t\t\"type\": \"payment_initiation\",\n\t\t\t\t\t\"actions\": [\n\t\t\t\t\t\t\"initiate\",\n\t\t\t\t\t\t\"status\",\n\t\t\t\t\t\t\"cancel\"\n\t\t\t\t\t],\n\t\t\t\t\t\"locations\": [\"https://example.com/payments\"],\n\t\t\t\t\t\"instructedAmount\": {\n\t\t\t\t\t\t\"currency\": \"EUR\",\n\t\t\t\t\t\t\"amount\": \"123.50\"\n\t\t\t\t\t},\n\t\t\t\t\t\"creditorName\": \"Merchant A\",\n\t\t\t\t\t\"creditorAccount\": {\n\t\t\t\t\t\t\"iban\": \"DE02100100109307118603\"\n\t\t\t\t\t},\n\t\t\t\t\t\"remittanceInformationUnstructured\": \"Ref Number Merchant\"\n\t\t\t}]\n\t\t}]\n\t}\n}\n```\n\n**Missing expected access token claims - email**\n```json\n{\n    \"decision\": false,\n    \"context\": {\n        \"error_msg\": \"Missing expected access token scope\",\n        \"details\": [{\n\t\t\t\"loc\": \"/email\",\n\t\t\t\"method\": \"exists\"\n\t\t}]\n\t}\n}\n```\n\n**Missing access token claims - gty, ccr, cmr**\n```json\n{\n    \"decision\": false,\n    \"context\": {\n        \"error_msg\": \"Missing token claims - gty, ccr, cmr\",\n        \"details\": [{\n\t\t\"loc\": \"/gty\",\n\t\t\"method\": \"exists\"\n\t\t}, {\n\t\t\"loc\": \"/ccr\",\n\t\t\"method\": \"exists\"\n\t\t}, {\n\t\t\"loc\": \"/cmr\",\n\t\t\"method\": \"exists\"\n\t\t}]\n\t}\n}\n```\n\n**Expected claim values not met - gty, ccr, cmr**\n```json\n{\n    \"decision\": false,\n    \"context\": {\n        \"error_msg\": \"Insufficient token claim value - gty, ccr, cmr\",\n        \"details\": [{\n\t\t\"loc\": \"/gty\",\n\t\t\"method\": \"simple\",\n\t\t\"values\": [\"authorization_code_flow\", \"client_credentials\"]\n\t\t}, {\n\t\t\"loc\": \"/ccr\",\n\t\t\"method\": \"simple\",\n\t\t\"value\": \"urn:org:iana:client:assurance:level_1\"\n\t\t}, {\n\t\t\"loc\": \"/cmr\",\n\t\t\"method\": \"simple\",\n\t\t\"values\": [\"private_key_jwt\", \"client_secret_jwt\"]\n\t\t}]\n\t}\n}\n```",
      "createdAt": "2025-06-17T13:48:10Z",
      "updatedAt": "2025-07-07T16:34:51Z",
      "closedAt": "2025-07-03T21:08:14Z",
      "comments": [
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "The EKYC seems like a fair proposal, will add that to the dicussion points in IETF-123 Madrid\n\nIn the meantime, adding [ Draft-OAuth2.1 / Section5.3.2 ](https://datatracker.ietf.org/doc/html/draft-ietf-oauth-v2-1-12#section-5.3.2) has reference for :\n- `403` being a valid HTTP Error Code for  Instructive response too\n- `403` supporting `WWW-Authenticate` HTTP header",
          "createdAt": "2025-06-23T13:51:14Z",
          "updatedAt": "2025-06-23T13:51:14Z"
        },
        {
          "author": "yaron-zehavi",
          "authorAssociation": "NONE",
          "body": "Edited issue & responses to reflect today's discussion",
          "createdAt": "2025-06-26T20:21:39Z",
          "updatedAt": "2025-06-26T20:21:39Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "I am little bit lost as it seemed to me that:\n- the agreed proposal was to have `resource_metdata_uri` as challenge of `WWW-Authenticate` with the ability to set a second or alternative challenge to `body_instructions` if a body was present\n- `informative` and `instructive` should no longer be specified anymore as it is to the client to decide along which flow to execute the response\n- in fact saying:\n\n```\n{\n  \"loc\": \"/gty\",\n  \"method\": \"simple\",\n  \"values\": [\"authorization_code_flow\", \"client_credentials\"]\n}\n```\nis already bearing the sense that the claim gty is expected. There is no need to encpsulate it in a `\"expected_claims\"` nor an `Informative` clause.\n\n- we agreed that `authorization_detaills` would then be represented as:\n\n```\n{\n  \"loc\": \"/authorization_details\",\n  \"method\": \"simple\",\n  \"value\": {\n\t\"type\": \"payment_initiation\",\n\t\t\"actions\": [\n\t\t\t\"initiate\",\n\t\t\t\"status\",\n\t\t\t\"cancel\"\n\t\t],\n\t\t\"locations\": [\"https://example.com/payments\"],\n\t\t\"instructedAmount\": {\n\t\t\t\"currency\": \"EUR\",\n\t\t\t\"amount\": \"123.50\"\n\t\t},\n\t\t\"creditorName\": \"Merchant A\",\n\t\t\"creditorAccount\": {\n\t\t\t\"iban\": \"DE02100100109307118603\"\n\t\t},\n\t\t\"remittanceInformationUnstructured\": \"Ref Number Merchant\"\n\t}\n }\n```\n\nwithout any notion of `instructive` as the client will decide how to proceed, if pby RAR, PAR, JAR or any other mean it sees fit.",
          "createdAt": "2025-06-27T03:44:04Z",
          "updatedAt": "2025-06-27T03:44:26Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "Also passing `resource_metdata_uri` in the body creates confusion as all the others elements must be authorization request parameters and `resource_metdata_uri` is not one.\n\nTherefore I counter propose that `resource_metdata_uri` remains a challenge, for example:\n\n```\nHTTP/1.1 403 Forbidden\nWWW-Authenticate: Bearer error=\"insufficient_authorization\", error_description=\"The authorization level is not met\", resource_metadata_uri=\"https://www.example.com/.well-known/oauth-protected-resource\", body_instructions=true\n\n{\n    \"decision\": false,\n    \"context\": {\n        \"error_msg\": \"Missing expected access token scope\",\n        \"details\": [\n            {\n                \"loc\": \"scope\",\n                \"values\": [\"resource:read\", \"resource:write\"]\n\t\t    }\n        ]\n    }\n}\n```\n\n\n",
          "createdAt": "2025-06-27T04:19:08Z",
          "updatedAt": "2025-06-27T04:19:44Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "Finally ASC does not allow OneOf or Among comparisons. \n\n1. What if I want to say that `scope` must be one of ['A', 'B'] ?\n2. What if I want to say that `scope` must contain 'A' and 'B' without necessarily be `A B`? meaning that `A B C` and `A D B` should be valid too.",
          "createdAt": "2025-06-27T04:22:47Z",
          "updatedAt": "2025-06-27T04:28:37Z"
        },
        {
          "author": "yaron-zehavi",
          "authorAssociation": "NONE",
          "body": "Thanks @identitymonk agree with comments. I made the change at night before going to bed and already had thoughts in the same direction as you. I've reworked it using your proposal.\n\nASC supports oneOf. See:\nhttps://openid.bitbucket.io/ekyc/openid-connect-advanced-syntax-for-claims.html#name-syntax-and-processing\n\n\"For values, the claim value must exactly match at least **one of** the values in the array\"\n\nHowever, ASC does not support 2Of, as in `scope` must contain 'A' and 'B'. I think when considering `scope` that's okay as also API GW's process it as oneOf. If it's a gap we can discuss it with Daniel Fett to enhance his draft",
          "createdAt": "2025-06-27T07:48:12Z",
          "updatedAt": "2025-06-27T08:09:01Z"
        },
        {
          "author": "baboulebou",
          "authorAssociation": "COLLABORATOR",
          "body": "So the AuthZEN `context` response element is currently being reviewed, the changes I propose in authzen (just 'cause that task was assigned to me by the group - ok I volunteered...) add a bit more structure to the field. These would break-up the details of the PDP's Access decision into several categories within the `context` object:\n- reason\n- properties\n- obligations\n- metadata\n- environment\n\nHere's a non-normative example of what the `context` of an AuthZXEN response  _could_ look like (this is currently under review and is likely to change a bit). \n\n```json\n{\n  \"decision\": false,\n  \"context\": {\n    \"reason\": {\n      \"reason_admin\": {\n        \"insufficient_user_authentication\": \"Request failed policy C076E82F\"\n      },\n      \"reason_user\": {\n        \"insufficient_user_authentication\": \"This access requires strong authentication.\"\n      }\n    },\n    \"properties\": {\n      \"group\": \"Employee\",\n      \"department\": \"Sales\"\n    },\n    \"obligation\": [\n      {\n        \"acr_values\": \"urn:com:example:loa:3\",\n        \"amr_values\": \"mfa hwk\"\n      },\n      {\n        \"action\": {\n          \"type\": \"email\",\n          \"parameters\": {\n            \"to\": \"manager@example.com\",\n            \"subject\": \"Insufficient Assurance Level in Access Request\",\n            \"body\": \"<userid>\"\n          }\n        }\n      }\n    ],\n    \"metadata\": {\n      \"response-time\": 60,\n      \"response-time-unit\": \"ms\",\n      \"number-of-records\": 2000\n    },\n    \"environment\": {\n      \"ip\": \"10.10.0.1\",\n      \"datetime\": \"2025-06-27T18:03:07Z\",\n      \"os\": \"ubuntu24.04.2LTS-AMDx64\"\n    }\n  }\n}\n```\n\nI think what you propose here could be broken-up into `reason` + `obligation` + `properties`. Same information/data really, but just a more specific structure. \nthoughts?",
          "createdAt": "2025-07-07T16:32:31Z",
          "updatedAt": "2025-07-07T16:34:51Z"
        }
      ]
    },
    {
      "number": 9,
      "id": "I_kwDOOIDCrM682AOT",
      "title": "Dicuss ability for RP to return a reference to Request Object as defined in section 2.2 of JWT-Secured Authorization Request [RFC9101]",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/9",
      "state": "OPEN",
      "author": "identitymonk",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "While it is possible for the RP to return a Request Object as defined in section 2.2 of JWT-Secured Authorization Request [RFC9101] signed by the RP for the client to send to the AS, as of now there is no standard for an RP to push a JAR to the AS using Pushed Authorization Request and pass the reference URI to the client.\n\nThe group need to discuss more this proposition.\n",
      "createdAt": "2025-06-23T13:46:02Z",
      "updatedAt": "2025-07-07T15:27:22Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yaron-zehavi",
          "authorAssociation": "NONE",
          "body": "I'm a bit confused, RP == client right? So maybe you meant RS where RP appears?",
          "createdAt": "2025-06-23T17:44:01Z",
          "updatedAt": "2025-06-23T17:44:01Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "RP === Resource Provider === Resource Server and not the Client",
          "createdAt": "2025-06-23T17:59:55Z",
          "updatedAt": "2025-06-23T17:59:55Z"
        },
        {
          "author": "yaron-zehavi",
          "authorAssociation": "NONE",
          "body": "I see, RP is also an OpenID term for Relying Party, which confused me",
          "createdAt": "2025-06-23T18:05:45Z",
          "updatedAt": "2025-06-23T18:05:45Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "It seems that the blocking requirement is the **MUST** in [section 4 of RFC9101 / The OAuth 2.0 Authorization Framework: JWT-Secured Authorization Request (JAR)](https://datatracker.ietf.org/doc/html/rfc9101.html#section-4):\n\n> A [Request Object](https://datatracker.ietf.org/doc/html/rfc9101.html#request_object) ([Section 2.1](https://datatracker.ietf.org/doc/html/rfc9101.html#request_object)) is used to provide authorization request parameters for an OAuth 2.0 authorization request. It MUST contain all the parameters (including extension parameters) used to process the [OAuth 2.0](https://datatracker.ietf.org/doc/html/rfc6749) [[RFC6749](https://datatracker.ietf.org/doc/html/rfc6749)] authorization request except the request and request_uri parameters that are defined in this document.",
          "createdAt": "2025-07-07T14:35:38Z",
          "updatedAt": "2025-07-07T14:35:38Z"
        },
        {
          "author": "baboulebou",
          "authorAssociation": "COLLABORATOR",
          "body": "This issue confuses me @identitymonk , the JAR spec defines a mechanism for the _client_ to initiate an OAuth Authz flow by reference. Sections 4 and 5 of the spec that you link (which I re-read just now) do go through this. The RS is not part of this flow.\n\nI think I commented on this before, but having the RS communicate with the AS directly seems like a very bad idea to me, you can't cut the Client out of the loop, else the Client and RS may see different authorization states...\n\nAnyway what am I missing about this issue here? Can it be resolved?",
          "createdAt": "2025-07-07T14:50:28Z",
          "updatedAt": "2025-07-07T14:51:09Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "@baboulebou :\n- You don't miss anything for this spec. JAR cannot be used for all the points, you, @yaron-zehavi , and I mentionned in this thread.\n- As indicated in the titile, this is a discussion \"issue\". Having the RS pre negotiating the elements with the AS especially on what it expects as `authorization_details` without having the client to think about it and be allowed to tamper it on its way in are the intents here and I think they remain relevant..... but effectively in a separate Draft that could make it back in this one if successful.\n\nI already have a name for it: PNAR - Pre Negotiated Authorization Request",
          "createdAt": "2025-07-07T15:27:22Z",
          "updatedAt": "2025-07-07T15:27:22Z"
        }
      ]
    },
    {
      "number": 11,
      "id": "I_kwDOOIDCrM69098-",
      "title": "Feedback to -01 version",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/11",
      "state": "CLOSED",
      "author": "yaron-zehavi",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "- Introduction still mentions 2 error codes: \"with a new error codes, `failed_authorization` and `insufficient_authorization`\"\n- 4.1 \"The resource server responds with a 403 HTTP status code using the Bearer authentication scheme's error parameter\". Maybe not critical for now, but we should consider DPoP tokens as well, where `Bearer` doesn't fit\n- Typo in 5 https://www.ietf.org/archive/id/draft-lombardo-oauth-step-up-authz-challenge-proto-01.html#name-client-action-following-a-s, Should read \"Step-Up\" where \"Setp-Up\" is written\n- 6 Authorization Response https://www.ietf.org/archive/id/draft-lombardo-oauth-step-up-authz-challenge-proto-01.html#name-authorization-response - Perhaps can be removed as it doesn't change anything in how AS works\n- Same for 7 https://www.ietf.org/archive/id/draft-lombardo-oauth-step-up-authz-challenge-proto-01.html#name-information-conveyed-via-th",
      "createdAt": "2025-06-28T09:33:34Z",
      "updatedAt": "2025-07-07T13:52:38Z",
      "closedAt": "2025-07-03T20:49:28Z",
      "comments": [
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "thanks @yaron-zehavi.\n\nAll taken into account.  One comment on:\n\n>4.1 \"The resource server responds with a 403 HTTP status code using the Bearer authentication scheme's error parameter\". Maybe not critical for now, but we should consider DPoP tokens as well, where Bearer doesn't fit\n\nDPoP is proof  that the token issued is played by the client it has been issued to. Here the step-up Authorization signal is not commenting on DPoP but on the content of the access token presented as bearer token (whatever along a DPoP token or not. So the scheme is the right one as the challenge is concerning the Access Token. Up to the client to present a new Bearer Access Token based on this information with or without a DPoP token.\n\nStill I think that the notion of the DPoP token verification is an interesting ask in the scope of AuthZEN (@baboulebou )",
          "createdAt": "2025-06-28T19:44:49Z",
          "updatedAt": "2025-06-28T19:44:49Z"
        },
        {
          "author": "baboulebou",
          "authorAssociation": "COLLABORATOR",
          "body": "@identitymonk - AuthZEN + DPoP, maybe in the next version ?",
          "createdAt": "2025-07-07T13:52:38Z",
          "updatedAt": "2025-07-07T13:52:38Z"
        }
      ]
    },
    {
      "number": 14,
      "id": "I_kwDOOIDCrM6-jqhB",
      "title": "Is this proposal mutually exclusive with RFC 9470",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/14",
      "state": "OPEN",
      "author": "gffletch",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "RFC 9470 uses HTTP status code 401 and this specification use HTTP status code 403. This means that if the resource server needs to both enhance the authentication and the authorization requirements, it has to do so in two steps?\n\nOr does this specification allow for the requirements specified in RFC 9470 to also be included in the body instructions?",
      "createdAt": "2025-07-02T19:53:29Z",
      "updatedAt": "2025-07-03T20:57:38Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yaron-zehavi",
          "authorAssociation": "NONE",
          "body": "MDN: https://developer.mozilla.org/en-US/docs/Web/HTTP/Reference/Headers/WWW-Authenticate\nMultiple challenges are allowed in one WWW-Authenticate header, and multiple WWW-Authenticate headers are allowed in one response\n\nSo +1 to support also RFC 9470 in the same response, as it contributes to interoperability and simplification.\nJust need to define the semantics (multiple headers or multiple challenges in the same header)",
          "createdAt": "2025-07-03T16:09:02Z",
          "updatedAt": "2025-07-03T16:09:02Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "We got this discussion and RFC 9470 states that:\n>  The logic examining the incoming access token to determine whether or not a challenge should be returned can be executed either before or after the conventional token-validation logic, be it based on JWT validation, introspection, or any other method. The resource server MAY return a challenge without verifying the client presented a valid token. However, this approach will leak the required properties of an authorization token to an actor who has not proven they can obtain a token for this resource server.\n\nwhile our proposal states that:\n> For this specification, the resource provider MUST examine the incoming access token and enforce the conventional token-validation logic - be it based on JWT validation, introspection, or any other method - before determining whether or not a challenge should be returned.\n\nTherefore my stance my stance is that 401 to be returned for user based authentication, scope misalignment, or invalid token. While 403 is in any other case.\n\nThis will be a discussion at IETF 123\n\n\n",
          "createdAt": "2025-07-03T20:57:37Z",
          "updatedAt": "2025-07-03T20:57:37Z"
        }
      ]
    },
    {
      "number": 15,
      "id": "I_kwDOOIDCrM6-jx73",
      "title": "User Managed Access 2.0 and this specification",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/15",
      "state": "OPEN",
      "author": "gffletch",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "UMA 2.0 allowed the client to request access to a resource endpoint with no access token at all. The resource server would then \"step-up\" the client but providing the location of the appropriate authorization server where the client would then engage the human and the AS to complete the necessary authorization steps until the client is issued an \"access token\" by which it can access the protected resource.\n\nDo we consider such a use case out of scope for this specification? In other words, if a request is made to the protected resource without an access token or an invalid access token, the result of the request is a failed access attempt and NO information is provided to the client as to why or what the client can do to obtain access.\n\nIf we consider the \"no access token\" use case in scope, then we might want to call it out explicitly. The combination of the `resource_metadata_uri` challenge and the `body_instructions` provides a mechanism to enable such a wide-ecosystem deployment.\n\nThis is somewhat described in the Appendix section A.1.3. ",
      "createdAt": "2025-07-02T20:06:00Z",
      "updatedAt": "2025-07-11T15:52:47Z",
      "closedAt": null,
      "comments": [
        {
          "author": "yaron-zehavi",
          "authorAssociation": "NONE",
          "body": "+1\n\nI think that's a valid and interoperable use-case we can easily support with `resource_metadata_uri` challenge and `body_instructions=false`",
          "createdAt": "2025-07-03T14:22:12Z",
          "updatedAt": "2025-07-03T14:22:12Z"
        },
        {
          "author": "baboulebou",
          "authorAssociation": "COLLABORATOR",
          "body": "This ties in nicely with a couple of discussions in AuthZEN right now... If\r\nthe RS implements a PEP, then the PDP MAY return an AuthZEN response with\r\nan obligation for Step-up.\r\n\r\nAt that point, indeed the RS could also initiate that flow with the AS\r\ndirectly... but then (because of the potential AuthZEN response contents),\r\nI wouldn't necessarily set body_instructions to false. I'd leave that open\r\n(true or false)... the AS could then also use any additional context\r\nprovided by the PDP.\r\n\r\nNevertheless, here we're saying that the burden of implementing the step-up\r\nflow could fall not only onto the Client's lap, but also the RS's... I\r\nguess something has to initiate/manage that flow, so supporting both ways\r\nseems fair, but I'm wondering if an RS implementer would want to take-on\r\nthat responsibility and added complexity?\r\n\r\nMoreover, if this RS/AS flow was implemented, then the CLient would be out\r\nof the loop, how would it then deal with a possible discrepancy between the\r\nuser-agent token and what it stored before? In UMA I believe the RS has a\r\nPAT token (right George ?), assuming that the PAT could be understood\r\nsomehow by the Client too if it ever saw it? dunno... but not an easy nut\r\nto crack I think.\r\n\r\nIn other words, it seems to me that cutting the Client out of the loop may\r\nbe dangerous and lead to discrepancies in access... I wouldn't add this to\r\nthis spec. my $0.02...\r\n\r\nCHeers,\r\n\r\n./\\.\r\n\r\nCheers,\r\n\r\n./\\\\.\r\n\r\nOn Thu, Jul 3, 2025 at 7:22\u202fAM yaron-zehavi ***@***.***>\r\nwrote:\r\n\r\n> *yaron-zehavi* left a comment\r\n> (identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto#15)\r\n> <https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/15#issuecomment-3032465664>\r\n>\r\n> +1\r\n>\r\n> I think that's a valid and interoperable use-case we can easily support\r\n> with resource_metadata_uri challenge and body_instructions=false\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/15#issuecomment-3032465664>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/ABCDAWXSUHSKYORRT73GMTD3GU4CVAVCNFSM6AAAAACAU43SZCVHI2DSMVQWIX3LMV43OSLTON2WKQ3PNVWWK3TUHMZTAMZSGQ3DKNRWGQ>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID:\r\n> <identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/15/3032465664\r\n> @github.com>\r\n>\r\n\r\n\r\n-- \r\n\r\n\r\nAlex Babeanu\r\nLead Product Manager, AI Control  Suite\r\n\r\nt. +1 604 728 8130\r\ne. ***@***.***\r\nw. www.indykite.com\r\n",
          "createdAt": "2025-07-03T15:37:52Z",
          "updatedAt": "2025-07-03T15:37:52Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "@baboulebou i am not sure the point raised here has any relation to RS talking to AS. \n\n@gffletch I did not thought about this use case so that would contradict my previous answer for #14 but I like it. Will propose a PR on this\n",
          "createdAt": "2025-07-03T21:01:12Z",
          "updatedAt": "2025-07-03T21:01:12Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "@gffletch from a discussion with Justin Richer, [GNAP ](https://datatracker.ietf.org/doc/rfc9635/) is the replacement of UMA 2.0 so I will use that as a base",
          "createdAt": "2025-07-07T15:29:47Z",
          "updatedAt": "2025-07-07T15:29:47Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "@yaron-zehavi  on\n\n> a valid and interoperable use-case we can easily support with `resource_metadata_uri` challenge and `body_instructions=false`\n\njust a point that `resource_metadata_uri` challenge and `body_instructions=false` is equivalent to `resource_metadata_uri` challenge without any mention of the `body_instructions` challenge as per the current draft.\n\n> The resource server MAY return a challenge with the key `body_instructions` When this challenge is present, its value MUST be set to `false` if no body is associated to the response from the resource server, or `true` if a body is associated to the response from the resource server.\n\nI will add the following text in the next PR to make it clearer:\n\n> If the challenge `body_instructions` is not present, the client MUST consider that it equivalent of receiving a `body_instructions` set to `false` and discard any body content from processing.\n\n",
          "createdAt": "2025-07-07T15:34:18Z",
          "updatedAt": "2025-07-07T15:34:18Z"
        },
        {
          "author": "gffletch",
          "authorAssociation": "NONE",
          "body": "A couple of comments...\n\nRegarding GNAP: Justin worked to include a lot of the UMA requirements into the GNAP protocol. I'm not sure I'd say it is an exact replacement.\n\nOne of the key goals of UMA is to allow for \"Alice to Bob\" sharing. Here is a [presentation](https://www.slideshare.net/CloudIDSummit/cis-2015-user-managed-access) I did at CIS in 2015. It has an example of Alice sharing calendar information with Bob to allow Bob to schedule a meeting.\n\nAnother key feature of UMA is to support wide eco-system deployments. Meaning, that client software may request access to a resource without any pre-registration of the client software and the client be directed to the appropriate AS to both dynamically register and then authorize in order to access the client.\n\nIn the UMA model, the AS being used can be different per requested resource meaning that if the protected resource is a photo site, then Alice could choose one AS to protect her resources at the site and Bob could use a completely different AS to protect his resources. While not explicitly prohibited by this draft, I don't see this use case being a key requirement for this specification.\n\nUMA really has two core specifications:\n1. [User Managed Access 2.0 grant for OAuth 2.0 Authorization](https://docs.kantarainitiative.org/uma/wg/rec-oauth-uma-grant-2.0.html) - this is the specification for how a software client accesses a UMA protected resource. The basic flow is pretty identical to what is presented in this specification. What's different is that UMA defined some unique mechanisms for the client to remember prior authorizations with the AS to make future authorizations simpler and a better user experience. UMA also called the issued \"access token\" the \"Requesting Party Token\" because the token itself does not contain the authorization claims but rather points to state in the AS that holds the authorization claims for this particular request.\n2. [Federated Authorization for User Managed Access 2.0](https://docs.kantarainitiative.org/uma/wg/rec-oauth-uma-federated-authz-2.0.html) - this specification covers how the resource server works with the different authorization servers to externalize the authorization policy for the protected resource to the AS. If this UMA requirement is out-of-scope then we don't really need to consider it.\n\nRegarding how UMA allowed a client to request access to a protected resource it works like this...\n\n1. client makes a request without a requesting party token (RPT)\n2. Protected resource (RS) checks with the appropriate AS to obtain a permission ticket (this ticket points to the state of which client and resource is being accessed)\n3. RS returns a HTTP 401 Unauthorized response with a WWW-Authenticate header `WWW-Authenticate: UMA realm=\"example\", as_uri=\"https://as.example.com\", ticket=\"afwrtasgfaw3twarea\" `\n4. client performs discovery on the `as_uri` to obtain information about the AS\n5. client optionally dynamically registers with the AS (if needed)\n6. client requests authorization with the AS (via the /token endpoint) using the UMA defined grant type\n7. AS redirects the client to an \"interactive\" endpoint where the user of the client can authorize with the AS\n8. AS presents challenges and such until the user successfully authorizes\n9. AS redirects back to the client specifying a `ticket` value\n10. client makes a request back to the /token endpoint using the UMA grant to obtain the RPT\n11. AS issues the client an RPT\n12. client makes a request to the RS passing the RPT\n\nThat's the high level flow. I'm happy to write a blurb for the spec on compare / contrast UMA. I'd love thoughts on what should be included in such a discussion.",
          "createdAt": "2025-07-11T15:52:46Z",
          "updatedAt": "2025-07-11T15:52:46Z"
        }
      ]
    },
    {
      "number": 16,
      "id": "I_kwDOOIDCrM6-j4qT",
      "title": "Appendix - Does the LLM Tool have a valid access token for the external SaaS API",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/16",
      "state": "OPEN",
      "author": "gffletch",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "As best I can tell from the text, the user logs into the LLM Agent. The LLM Agent now has tokens issued by the Enterprise IDP that can be used the the LLM Tool. In A.1.2, the LLM Agent determine it needs to invoke an external tool via the LLM tool service. The LLM Agent can invoke the LLM Tool using an access token issued by the Enterprise IDP. However, that access token MUST NOT be sent to the external SaaS resource as that SaaS resource is in a completely different trust domain. It MAY be possible for the LLM Tool to obtain a JWT Authorization Grant from the Enterprise IDP for use with the SaaS Authorization server allowing the LLM Tool to obtain an access token issued by the SaaS Authorization Server. However, this requires the both the LLM Tool and the Enterprise IDP to know of the location of the SaaS Authorization Server and for the trust relationships between these servers to be pre-established.\n\nRegardless, I don't think what's described will work. \n\nAnother way to make it work, is to allow the LLM Tool to invoke the SaaS Resource API  with no access_token and then get back the necessary authentication/authorization requirements along with the location of the resource metadata URI. This would then allow use case flows very much akin to UMA.",
      "createdAt": "2025-07-02T20:16:33Z",
      "updatedAt": "2025-07-03T21:07:13Z",
      "closedAt": null,
      "comments": [
        {
          "author": "baboulebou",
          "authorAssociation": "COLLABORATOR",
          "body": "Can't the LLM tool and the underlying SaaS API/app be in the same trust\r\ndomain, serviced by the same IdP? Seems like this could work in that case.\r\n\r\n./\\.\r\n\r\nOn Wed, Jul 2, 2025 at 1:16\u202fPM George Fletcher ***@***.***>\r\nwrote:\r\n\r\n> *gffletch* created an issue\r\n> (identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto#16)\r\n> <https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/16>\r\n>\r\n> As best I can tell from the text, the user logs into the LLM Agent. The\r\n> LLM Agent now has tokens issued by the Enterprise IDP that can be used the\r\n> the LLM Tool. In A.1.2, the LLM Agent determine it needs to invoke an\r\n> external tool via the LLM tool service. The LLM Agent can invoke the LLM\r\n> Tool using an access token issued by the Enterprise IDP. However, that\r\n> access token MUST NOT be sent to the external SaaS resource as that SaaS\r\n> resource is in a completely different trust domain. It MAY be possible for\r\n> the LLM Tool to obtain a JWT Authorization Grant from the Enterprise IDP\r\n> for use with the SaaS Authorization server allowing the LLM Tool to obtain\r\n> an access token issued by the SaaS Authorization Server. However, this\r\n> requires the both the LLM Tool and the Enterprise IDP to know of the\r\n> location of the SaaS Authorization Server and for the trust relationships\r\n> between these servers to be pre-established.\r\n>\r\n> Regardless, I don't think what's described will work.\r\n>\r\n> Another way to make it work, is to allow the LLM Tool to invoke the SaaS\r\n> Resource API with no access_token and then get back the necessary\r\n> authentication/authorization requirements along with the location of the\r\n> resource metadata URI. This would then allow use case flows very much akin\r\n> to UMA.\r\n>\r\n> \u2014\r\n> Reply to this email directly, view it on GitHub\r\n> <https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/16>,\r\n> or unsubscribe\r\n> <https://github.com/notifications/unsubscribe-auth/ABCDAWRX4HZHJDN6DBRX7JT3GQ43RAVCNFSM6AAAAACAU5SOLGVHI2DSMVQWIX3LMV43ASLTON2WKOZTGE4TOMBXHAYTMMY>\r\n> .\r\n> You are receiving this because you are subscribed to this thread.Message\r\n> ID:\r\n> <identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/16\r\n> @github.com>\r\n>\r\n\r\n\r\n-- \r\n\r\n\r\nAlex Babeanu\r\nLead Product Manager, AI Control  Suite\r\n\r\nt. +1 604 728 8130\r\ne. ***@***.***\r\nw. www.indykite.com\r\n",
          "createdAt": "2025-07-03T15:46:37Z",
          "updatedAt": "2025-07-03T15:46:37Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "> However, that access token MUST NOT be sent to the external SaaS resource as that SaaS resource is in a completely different trust domain.\n\nthat not necessarily true @gffletch - the Agent, the Tool, and the Service might be in the same trust domain. Yes is they are in another trust domain that is another Draft for that: https://datatracker.ietf.org/doc/draft-parecki-oauth-identity-assertion-authz-grant/\n\nYes, now applying the point of #15 we could say that the it is either the access token received or no access token which is played by the tool against the service to get the Step-Up instructions.\n\nI recognize that [MCP Specifications out of 2025-06-18 section 2.6.2 release](https://modelcontextprotocol.io/specification/2025-06-18/basic/authorization#token-handling) states that:\n> MCP servers MUST NOT accept or transit any other tokens.",
          "createdAt": "2025-07-03T21:07:12Z",
          "updatedAt": "2025-07-03T21:07:12Z"
        }
      ]
    },
    {
      "number": 18,
      "id": "I_kwDOOIDCrM7A9KpA",
      "title": "Discuss alternatives to `body_instructions`",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/18",
      "state": "OPEN",
      "author": "max-stytch",
      "authorAssociation": "NONE",
      "assignees": [],
      "labels": [],
      "body": "Hello! Nice to meet. I was super excited to find this I-D - this is definitely a problem I am running into while attempting to apply FGA concepts to the MCP ecosystem. MCP is currently making use of OAuth scopes and OAuth resource URLs, but doesn't have a mechanism to bring in RAR `authorization_details` yet. MCP Clients and MCP Servers often have no prior knowledge of each other. This means MCP clients do not know the proprietary authz scheme employed by the MCP Server, so it is impossible for MCP Clients to construct the `authorization_details` object themselves. We need a mechanism for the MCP Server to instruct the MCP client what parameters to use - this I-D solves that!\n\n----\n\nOne hesitation I have - the use of `body_instructions` means that this scheme cannot be used with any endpoint that already returns a response body. I would be cautious assuming that the response body is empty for all failed requests. RFC6750 does not require the body to be empty. It is very common for the response body to contain a structured application-level error. \n\nFor example, MCP states that the response body should be a JSON RPC message with a suitable JSON RPC error code:\n> If the input is a JSON-RPC request, the server MUST either return Content-Type: text/event-stream, to initiate an SSE stream, or Content-Type: application/json, to return one JSON object. The client MUST support both these cases.\n\nOne possible solution could be to encode the `body_instructions` object as base64url encoded JSON (not a JWT - no signing necessary) within the response header itself - e.g.\n```\nHTTP/1.1 403 Forbidden\nWWW-Authenticate: Bearer error=\"insufficient_authorization\", \n    error_description=\"The authorization level is not met\",\n    resource_metadata_uri=\"https://www.example.com/.well-known/oauth-protected-resource\",\n    authzen_response=\"eyJ...\"\n```\n\nField renamed to `authzen_response` in the above example, exact field name TBD.\n\nOAuth Access Token JWTs have a long history of being included in request headers as base64url encoded JSON, so there is substantial prior art to go off of. RAR `authorization_details` can get quite large, but often end up directly encoded in JWT access tokens anyway.\n\nPlease let me know your opinions - or if there are other considerations I am not aware of that make this less of an issue. ",
      "createdAt": "2025-07-16T20:23:42Z",
      "updatedAt": "2025-07-17T03:20:26Z",
      "closedAt": null,
      "comments": [
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "Very good analysis @max-stytch let me come back to you. The initial stance was the size of the potential WWW-Authenticate header",
          "createdAt": "2025-07-17T03:20:26Z",
          "updatedAt": "2025-07-17T03:20:26Z"
        }
      ]
    },
    {
      "number": 19,
      "id": "I_kwDOOIDCrM7BHYyB",
      "title": "Incompatible `response_body` format",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/issues/19",
      "state": "OPEN",
      "author": "baboulebou",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "Section 4.4.2.1 of the spec draft currently states the following:\n\n> \"If a body is attached to the to the response from the resource server, it MUST be formatted as an AuthZEN [[D-OpenID-AuthZEN](https://identitymonk.github.io/draft-lombardo-oauth-step-up-authz-challenge-proto/draft-lombardo-oauth-step-up-authz-challenge-proto.html#D-OpenID-AuthZEN)] response\" \n\nIt then proceeds to add that part of this response body, there is an optional `details` element, defined as follows:\n\n> \"OPTIONAL - a JSON structure representing the expected parameters to be passed by the client to the authorization server if a new authorization request is attempted. This JSON structure MUST be formatted using the syntax defined by [[eKYC.IDA.ASC](https://identitymonk.github.io/draft-lombardo-oauth-step-up-authz-challenge-proto/draft-lombardo-oauth-step-up-authz-challenge-proto.html#eKYC.IDA.ASC)]\"\n\nNevertheless although possible, this format is not at all normative for AuthZEN. Therefore if we say that the response body must be AuthZEN compliant, using ASC should be optional, as that is just a possible way of expressing the details via an AuthZEN response.\n\nNote also that AuthZEN responses are currently being modified. I would remove mention of ASC here, and maybe instead bring it up with AuthZEN group.",
      "createdAt": "2025-07-17T15:07:05Z",
      "updatedAt": "2025-07-18T14:36:11Z",
      "closedAt": null,
      "comments": [
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "is this AuthZEN Compliant as an Answer  @baboulebou \n\n```\nHTTP/1.1 403 Forbidden\nWWW-Authenticate: Bearer error=\"insufficient_authorization\", \nerror_description=\"The authorization level is not met\",  body_instructions=true\n\n{\n  \"decision\": false,\n  \"context\": {\n  }\n}\n```",
          "createdAt": "2025-07-17T15:07:55Z",
          "updatedAt": "2025-07-17T15:07:55Z"
        },
        {
          "author": "baboulebou",
          "authorAssociation": "COLLABORATOR",
          "body": "yes, my issue is making ASC Mandatory in this spec here. instead, leave it to \u201cAuthZEN\u201d response, and let\u2019s bring-up ASC with the AuthZEN group",
          "createdAt": "2025-07-17T15:08:25Z",
          "updatedAt": "2025-07-17T15:08:59Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "eKYC ASC is mandatory for the formatting of an optional claim, `details`, which is specific to this draft. AuthZEN WG has no oversight on this as long as we respect the only constraint they set: that the `details` claim and its value created in the `context` claim of the AuthZEN response are JSON compliant.\n\n[AuthZEN section 5.4. Context](https://openid.github.io/authzen/#name-context)](https://openid.github.io/authzen/#section-5.4)\n> The Context object is a set of attributes that represent environmental or contextual data about the request such as time of day. It is a JSON ([[RFC8259](https://openid.github.io/authzen/#RFC8259)]) object.\n\nAs presented in the examples of this draft, `context` and the underlying optional claim `details` in eKYC ASC format are JSON compliant:\n\n```\nHTTP/1.1 403 Forbidden\nWWW-Authenticate: Bearer error=\"insufficient_authorization\", \nerror_description=\"The authorization level is not met\",  body_instructions=true\n\n{\n  \"decision\": false,\n  \"context\": {\n      \"error_msg\": \"Missing authorization_details\",\n      \"details\": [{\n          \"loc\": \"/authorization_details\",\n          \"method\": \"simple\",\n          \"value\": [{\n              \"type\": \"payment_initiation\",\n              \"actions\": [\n                  \"initiate\",\n                  \"status\",\n                  \"cancel\"\n               ],\n               \"locations\": [\"https://example.com/payments\"],\n               \"instructedAmount\": {\n               \"currency\": \"EUR\",\n               \"amount\": \"123.50\"\n               },\n          \"creditorName\": \"Merchant A\",\n          \"creditorAccount\": {\n            \"iban\": \"DE02100100109307118603\"\n          },\n          \"remittanceInformationUnstructured\": \"Ref Number Merchant\"\n      }]\n    }]\n  }\n}\n```\n\n",
          "createdAt": "2025-07-17T15:27:07Z",
          "updatedAt": "2025-07-17T15:27:07Z"
        },
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": "This point will be discussed at IETF 123 along issue #18 ",
          "createdAt": "2025-07-18T14:36:11Z",
          "updatedAt": "2025-07-18T14:36:11Z"
        }
      ]
    }
  ],
  "pulls": [
    {
      "number": 1,
      "id": "PR_kwDOOIDCrM6XelOZ",
      "title": "Draft 00",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/pull/1",
      "state": "MERGED",
      "author": "identitymonk",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Inital push to declare the base of the proposal",
      "createdAt": "2025-05-24T04:45:53Z",
      "updatedAt": "2025-06-23T21:20:03Z",
      "baseRepository": "identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto",
      "baseRefName": "main",
      "baseRefOid": "d2edb746d099ac8b11f519825f25338957dead6d",
      "headRepository": "identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto",
      "headRefName": "Draft-00",
      "headRefOid": "1ce6776cb840d7c5b738e6966ec2d2ad11356cda",
      "closedAt": "2025-05-24T04:46:32Z",
      "mergedAt": "2025-05-24T04:46:32Z",
      "mergedBy": "identitymonk",
      "mergeCommit": {
        "oid": "b04b2590c809514dc1f132d56884c3409abfc474"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 4,
      "id": "PR_kwDOOIDCrM6X3yVb",
      "title": "Alex's updates",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/pull/4",
      "state": "MERGED",
      "author": "baboulebou",
      "authorAssociation": "COLLABORATOR",
      "assignees": [],
      "labels": [],
      "body": "- Fixes to various part of the text, clarifications.\r\n- Changed the LLM example to use MCP.",
      "createdAt": "2025-05-28T00:32:27Z",
      "updatedAt": "2025-06-23T21:19:36Z",
      "baseRepository": "identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto",
      "baseRefName": "main",
      "baseRefOid": "ae377152869f17b239569131a100af09c9a3a863",
      "headRepository": "identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto",
      "headRefName": "alex-review-1",
      "headRefOid": "6e703220314c5d441a2de12db182fac51aa51a91",
      "closedAt": "2025-06-23T21:19:30Z",
      "mergedAt": "2025-06-23T21:19:30Z",
      "mergedBy": "identitymonk",
      "mergeCommit": {
        "oid": "7dd4ca3cafbf1072619fc73a2e4d635fc363a585"
      },
      "comments": [
        {
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "body": " Update following team call:\r\n\r\n- Updated Authors list\r\n- Created acknowledgement\r\n- Added reference to RFC9470\r\n- Added references and examples for FAPI 2.0 Security Profiles as long SMART on FHIR\r\n- Corrected AuthZEN payload in response\r\n- Changed Applicative Error Code based on decisions (did not not change 403 for 401)\r\n- Changed Applicative Error description\r\n- Modified JAR parameter and removed Request parameter\r\n- Removed AS metadata requirements\r\n- Reworked Security Section",
          "createdAt": "2025-06-23T21:19:15Z",
          "updatedAt": "2025-06-23T21:19:15Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOOIDCrM6rW8bo",
          "commit": {
            "abbreviatedOid": "fe13187"
          },
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "First path review",
          "createdAt": "2025-05-28T12:55:34Z",
          "updatedAt": "2025-05-28T13:22:56Z",
          "comments": [
            {
              "originalPosition": 5,
              "body": "We need to check why this is a change",
              "createdAt": "2025-05-28T12:55:34Z",
              "updatedAt": "2025-05-28T13:22:56Z"
            },
            {
              "originalPosition": 30,
              "body": "I ponder if we should not rename `insufficient_delegated_authorization` as `insufficient_authorization` to simplify as the other error code",
              "createdAt": "2025-05-28T12:58:13Z",
              "updatedAt": "2025-05-28T13:22:56Z"
            },
            {
              "originalPosition": 55,
              "body": "oxford comma",
              "createdAt": "2025-05-28T12:59:43Z",
              "updatedAt": "2025-05-28T13:22:56Z"
            },
            {
              "originalPosition": 64,
              "body": "- `the methods by which`\r\n- We might need to rework the sentence `this document rather describes the methoids by which the resource provider can signal to the client the type(s) of authorization garantees it is expected to obtain from the authorization server for the given request.`",
              "createdAt": "2025-05-28T13:02:48Z",
              "updatedAt": "2025-05-28T13:22:56Z"
            },
            {
              "originalPosition": 76,
              "body": "The Request does not have an internal authorization state requirements. It is fixed by the RP with the help of a PDP (optionally) so it is really `the` and not `its`",
              "createdAt": "2025-05-28T13:09:04Z",
              "updatedAt": "2025-05-28T13:22:56Z"
            },
            {
              "originalPosition": 85,
              "body": "We should have a complete see section X - below is too vague in guidance",
              "createdAt": "2025-05-28T13:10:03Z",
              "updatedAt": "2025-05-28T13:22:56Z"
            },
            {
              "originalPosition": 83,
              "body": "see comment on simplify this error code",
              "createdAt": "2025-05-28T13:10:25Z",
              "updatedAt": "2025-05-28T13:22:56Z"
            },
            {
              "originalPosition": 90,
              "body": "Should we not replace the `SHOULD` here with a `SHALL`",
              "createdAt": "2025-05-28T13:11:07Z",
              "updatedAt": "2025-05-28T13:22:56Z"
            },
            {
              "originalPosition": 109,
              "body": "As we removed the diagram with `<payload>` we can switch to the formal `HTTP body payload` mention here",
              "createdAt": "2025-05-28T13:16:15Z",
              "updatedAt": "2025-05-28T13:22:56Z"
            },
            {
              "originalPosition": 118,
              "body": "We need to do a pass on all MUST / SHOULD and other RFC keywords for the usage for of uppercase representation",
              "createdAt": "2025-05-28T13:17:10Z",
              "updatedAt": "2025-05-28T13:22:57Z"
            },
            {
              "originalPosition": 129,
              "body": "As we have the AuthZEN example after this one, maybe we can remove this one",
              "createdAt": "2025-05-28T13:18:25Z",
              "updatedAt": "2025-05-28T13:22:57Z"
            },
            {
              "originalPosition": 170,
              "body": "We should ensure this message for this error code is also AuthZEN formatted",
              "createdAt": "2025-05-28T13:19:24Z",
              "updatedAt": "2025-05-28T13:22:57Z"
            },
            {
              "originalPosition": 394,
              "body": "While markdown resolves the numbering properly, it might not be the case of other RFC format - we need to solve that here",
              "createdAt": "2025-05-28T13:22:30Z",
              "updatedAt": "2025-05-28T13:22:57Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOOIDCrM6rYW66",
          "commit": {
            "abbreviatedOid": "fe13187"
          },
          "author": "baboulebou",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-28T14:14:14Z",
          "updatedAt": "2025-05-28T14:14:14Z",
          "comments": [
            {
              "originalPosition": 30,
              "body": "I agree !",
              "createdAt": "2025-05-28T14:14:14Z",
              "updatedAt": "2025-05-28T14:14:14Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOOIDCrM6rYbh4",
          "commit": {
            "abbreviatedOid": "fe13187"
          },
          "author": "baboulebou",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-28T14:19:29Z",
          "updatedAt": "2025-05-28T14:19:29Z",
          "comments": [
            {
              "originalPosition": 64,
              "body": "Done, check for new commit.",
              "createdAt": "2025-05-28T14:19:29Z",
              "updatedAt": "2025-05-28T14:19:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOOIDCrM6rYdx-",
          "commit": {
            "abbreviatedOid": "fe13187"
          },
          "author": "baboulebou",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-28T14:22:04Z",
          "updatedAt": "2025-05-28T14:22:05Z",
          "comments": [
            {
              "originalPosition": 76,
              "body": "\"its\" refers to the \"Resource Server\" coming right after the \",\". I reworked the sentence, should be clearer now.\r\n",
              "createdAt": "2025-05-28T14:22:05Z",
              "updatedAt": "2025-05-28T14:22:05Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOOIDCrM6rYi_B",
          "commit": {
            "abbreviatedOid": "fe13187"
          },
          "author": "baboulebou",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-28T14:28:14Z",
          "updatedAt": "2025-05-28T14:28:15Z",
          "comments": [
            {
              "originalPosition": 109,
              "body": "Done.",
              "createdAt": "2025-05-28T14:28:14Z",
              "updatedAt": "2025-05-28T14:28:15Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOOIDCrM6rYj2w",
          "commit": {
            "abbreviatedOid": "fe13187"
          },
          "author": "baboulebou",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-28T14:29:16Z",
          "updatedAt": "2025-05-28T14:29:16Z",
          "comments": [
            {
              "originalPosition": 118,
              "body": "done",
              "createdAt": "2025-05-28T14:29:16Z",
              "updatedAt": "2025-05-28T14:29:16Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOOIDCrM6rY1ua",
          "commit": {
            "abbreviatedOid": "fe13187"
          },
          "author": "baboulebou",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-28T14:50:28Z",
          "updatedAt": "2025-05-28T14:50:29Z",
          "comments": [
            {
              "originalPosition": 129,
              "body": "Well I think it helps clarify things, may be redundant but not quite. It should an actual AuthZEN response (from the authzen spec), wanted to show an actual example.",
              "createdAt": "2025-05-28T14:50:29Z",
              "updatedAt": "2025-05-28T14:50:29Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOOIDCrM6rY7Zp",
          "commit": {
            "abbreviatedOid": "fe13187"
          },
          "author": "baboulebou",
          "authorAssociation": "COLLABORATOR",
          "state": "COMMENTED",
          "body": "",
          "createdAt": "2025-05-28T14:56:57Z",
          "updatedAt": "2025-05-28T14:56:57Z",
          "comments": [
            {
              "originalPosition": 170,
              "body": "done",
              "createdAt": "2025-05-28T14:56:57Z",
              "updatedAt": "2025-05-28T14:56:57Z"
            }
          ]
        }
      ]
    },
    {
      "number": 10,
      "id": "PR_kwDOOIDCrM6cgQIS",
      "title": "Jeff review 0626",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/pull/10",
      "state": "MERGED",
      "author": "identitymonk",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "This PR is taking into account all the discussions of the meeting of June 26th as long as the follow-up discussions with Yaron:\r\n\r\n- numbering\r\n- formatting of http code\r\n- merging of error code\r\n- removal of JAR\r\n- formatting of WWW-Authenticate\r\n- Formating of AuthZEN response with ASC taxonomy\r\n- Adding of OAuth2 Protected Resource capability",
      "createdAt": "2025-06-28T01:18:51Z",
      "updatedAt": "2025-07-17T03:58:19Z",
      "baseRepository": "identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto",
      "baseRefName": "main",
      "baseRefOid": "7dd4ca3cafbf1072619fc73a2e4d635fc363a585",
      "headRepository": "identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto",
      "headRefName": "jeff-review-0626",
      "headRefOid": "4f95cc0309f5edeee5393fa5e1af9dedc08f7fbf",
      "closedAt": "2025-06-28T01:21:19Z",
      "mergedAt": "2025-06-28T01:21:19Z",
      "mergedBy": "identitymonk",
      "mergeCommit": {
        "oid": "7dbb7815c99276574d1a3a88c0679363f264fd4c"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 12,
      "id": "PR_kwDOOIDCrM6cjDZX",
      "title": "integrated Yaron feedback on 2706",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/pull/12",
      "state": "MERGED",
      "author": "identitymonk",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "See #11 ",
      "createdAt": "2025-06-28T19:46:00Z",
      "updatedAt": "2025-06-28T19:46:38Z",
      "baseRepository": "identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto",
      "baseRefName": "main",
      "baseRefOid": "7dbb7815c99276574d1a3a88c0679363f264fd4c",
      "headRepository": "identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto",
      "headRefName": "review-2806",
      "headRefOid": "d1f4765ed546d5a05b4c41687f69c045066073ec",
      "closedAt": "2025-06-28T19:46:35Z",
      "mergedAt": "2025-06-28T19:46:35Z",
      "mergedBy": "identitymonk",
      "mergeCommit": {
        "oid": "6bddc2a0375e14aced0d7d767829fcf3015fa66d"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 13,
      "id": "PR_kwDOOIDCrM6csHMB",
      "title": "Review 2806",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/pull/13",
      "state": "MERGED",
      "author": "identitymonk",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Last fix on spell checks",
      "createdAt": "2025-06-30T12:41:50Z",
      "updatedAt": "2025-06-30T12:44:19Z",
      "baseRepository": "identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto",
      "baseRefName": "main",
      "baseRefOid": "6bddc2a0375e14aced0d7d767829fcf3015fa66d",
      "headRepository": "identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto",
      "headRefName": "review-2806",
      "headRefOid": "e9aa1fbbf1e135ad965326f28db87b775ca8f4cb",
      "closedAt": "2025-06-30T12:44:17Z",
      "mergedAt": "2025-06-30T12:44:17Z",
      "mergedBy": "identitymonk",
      "mergeCommit": {
        "oid": "95909237963d700ac9b804f7207af3feb2e7969b"
      },
      "comments": [],
      "reviews": []
    },
    {
      "number": 17,
      "id": "PR_kwDOOIDCrM6eU1Te",
      "title": "incorporating feedback from George and Yaron",
      "url": "https://github.com/identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto/pull/17",
      "state": "MERGED",
      "author": "identitymonk",
      "authorAssociation": "OWNER",
      "assignees": [],
      "labels": [],
      "body": "Incorporating feedback from #14 #15",
      "createdAt": "2025-07-10T14:55:52Z",
      "updatedAt": "2025-07-17T03:57:59Z",
      "baseRepository": "identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto",
      "baseRefName": "main",
      "baseRefOid": "8b425579c523f28e66bf1cb941191b9f638fcf38",
      "headRepository": "identitymonk/draft-lombardo-oauth-step-up-authz-challenge-proto",
      "headRefName": "review-0707",
      "headRefOid": "974912f39f90a101aaf314908bcae0bcced301a6",
      "closedAt": "2025-07-17T03:57:56Z",
      "mergedAt": "2025-07-17T03:57:56Z",
      "mergedBy": "identitymonk",
      "mergeCommit": {
        "oid": "dd0b3ffd5739c68807f3d29f50e7f38a36c99080"
      },
      "comments": [
        {
          "author": "yaron-zehavi",
          "authorAssociation": "NONE",
          "body": "eKYC.IDA reference is too generic, it should reference ASC so perhaps [eKYC.IDA.ASC]",
          "createdAt": "2025-07-11T08:30:06Z",
          "updatedAt": "2025-07-11T08:30:06Z"
        }
      ],
      "reviews": [
        {
          "id": "PRR_kwDOOIDCrM6zLpu2",
          "commit": {
            "abbreviatedOid": "51d66d6"
          },
          "author": "identitymonk",
          "authorAssociation": "OWNER",
          "state": "COMMENTED",
          "body": "review through call",
          "createdAt": "2025-07-10T15:10:42Z",
          "updatedAt": "2025-07-10T15:32:42Z",
          "comments": [
            {
              "originalPosition": 17,
              "body": "using a specific error code pointing at the authorization server that needs to be contacted an",
              "createdAt": "2025-07-10T15:10:42Z",
              "updatedAt": "2025-07-10T15:32:42Z"
            },
            {
              "originalPosition": 42,
              "body": "\"to the to\"",
              "createdAt": "2025-07-10T15:12:01Z",
              "updatedAt": "2025-07-10T15:32:42Z"
            },
            {
              "originalPosition": 27,
              "body": "This needs to be updated. Problem is markdown cannot start a list at a number not being 1.",
              "createdAt": "2025-07-10T15:26:12Z",
              "updatedAt": "2025-07-10T15:32:42Z"
            },
            {
              "originalPosition": 27,
              "body": "use one space in front of a ## title",
              "createdAt": "2025-07-10T15:30:48Z",
              "updatedAt": "2025-07-10T15:32:42Z"
            }
          ]
        },
        {
          "id": "PRR_kwDOOIDCrM6zXTC9",
          "commit": {
            "abbreviatedOid": "1825631"
          },
          "author": "yaron-zehavi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "It is not uncommon for resource servers to require additional information like details of **delegation** authorization --> **delegated**",
          "createdAt": "2025-07-11T08:27:52Z",
          "updatedAt": "2025-07-11T08:27:52Z",
          "comments": []
        },
        {
          "id": "PRR_kwDOOIDCrM6zXVWL",
          "commit": {
            "abbreviatedOid": "1825631"
          },
          "author": "yaron-zehavi",
          "authorAssociation": "NONE",
          "state": "COMMENTED",
          "body": "[I-D.ietf-oauth-v2-1]\r\n\"*** BROKEN REFERENCE ***\".\r\n[I-D.lombardo-oauth-client-extension-claims]\r\n\"*** BROKEN REFERENCE ***\".",
          "createdAt": "2025-07-11T08:29:21Z",
          "updatedAt": "2025-07-11T08:29:21Z",
          "comments": []
        }
      ]
    }
  ]
}